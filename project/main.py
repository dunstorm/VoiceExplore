from flask import Blueprint, render_template, request, url_for
from flask_login import login_required, current_user
from flask_mail import Mail, Message
from . import db,mail
import wikipedia
import geocoder
import psutil
import pyttsx3

main = Blueprint("main", __name__)


@main.route("/")
def index():

    return render_template("index.html")


@main.route("/profile")
@login_required
def profile():
    g = geocoder.ip('me')
    location = list(g.latlng)
    near_location = wikipedia.geosearch(location[0],location[1],results=4)
    li = []
    for loc in near_location:
        summ = wikipedia.summary(loc,sentences=2)
        img = list(wikipedia.page(loc).images)[0]
        li.append({'title':loc,'summary':summ,'img':img})
        # convert_text_to_speech(loc)
        # convert_text_to_speech(summ)

    return render_template("profile.html", name=current_user.name, place_list=li)



@main.route("/place/info", methods=['POST','GET'])
@login_required
def placeInfo():
    input_data = request.form['input-text']
    data = wikipedia.summary(input_data, sentences=2)
    # convert_text_to_speech(data)
    li = list(wikipedia.page(input_data).images)
    if len(li) > 4:
        img = li[:4]
    else:
        img = li[0]
    return render_template("place-info.html", name=current_user.name, data=data, input_data=input_data, img_list = img)


@main.route("/directions")
def directions():
    return render_template("directions.html")

@main.route("/sos", methods=['POST','GET'])
def sos():
    g = geocoder.ip('me')
    location = list(g.latlng)
    msg = Message('Sos message from '+current_user.name, sender = 'kanha180199@gmail.com', recipients = [current_user.em1email,current_user.em2email,current_user.em3email])
    msg.body = 'Alert...! \n This message is triggered by '+current_user.name+' \n He/She may be in trubble at the location(coordinates) '+str(location)+'.\n Quickly get some help for '+current_user.name+' ASAP.\n\n Battary percentage: '+str(psutil.sensors_battery().percent)+'%\nThis is an autogenerated by Voice Explore.'
    mail.send(msg)
    return render_template('sos.html')

def convert_text_to_speech(text):
    engine = pyttsx3.init() 
    engine.setProperty(
        "voice", "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens\TTS_MS_EN-US_ZIRA_11.0")
    rate = engine.getProperty("rate")
    engine.setProperty("rate", 180)
    engine.setProperty('volume', 1)
    engine.say(text)
    engine.runAndWait()
